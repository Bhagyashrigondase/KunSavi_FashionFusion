package com.app.services;

import java.util.List;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.dto.ApiResponse;
import com.app.dto.OrderDto;
import com.app.entities.Order;
import com.app.entities.Payment;
import com.app.entities.Product;
import com.app.entities.User;
import com.app.exceptions.ResourceNotFoundException;
import com.app.repositories.OrderRepository;
import com.app.repositories.PaymentRepository;
import com.app.repositories.ProductRepository;
import com.app.repositories.UserRepository;

@Service
@Transactional
public class OrderServiceImpl implements OrderService {
	
	@Autowired
	private OrderRepository repo;
	
	@Autowired
	private UserRepository userRepo;
	
	@Autowired 
	private ProductRepository productRepo;
	
	@Autowired 
	private PaymentRepository paymentRepo;
	
	@Autowired
	private ModelMapper mapper;

//	@Override
//	public List<OrderDto> getAllOrders() {
//		
//		return repo.findAll()
//				.stream()
//				.map(order->mapper.map(order, OrderDto.class))
//				.collect(Collectors.toList());
//	}
	
	@Override
	public List<OrderDto> getAllOrders() {
	    return repo.findAll()
	            .stream()
	            .map(order -> {
	                OrderDto dto = new OrderDto();
	                dto.setId(order.getId());
	                dto.setPurchaseDate(order.getPurchaseDate());
	                dto.setStatus(order.getStatus());
	                dto.setUser_id(order.getUser().getId());
	                dto.setProduct_id(order.getProduct().getId());
	                dto.setPayment_id(order.getPayment().getId());

	                // Custom mappings
//	                dto.setUserName(order.getUser().getName());
//	                dto.setProductName(order.getProduct().getName());
//	                dto.setPaymentMode(order.getPayment().getMode().toString());

	                return dto;
	            })
	            .collect(Collectors.toList());
	}


	@Override
	public ApiResponse deleteOrder(Long id) {
		if(repo.existsById(id))
		{
			repo.deleteById(id);
			return new ApiResponse("Order deleted!!");
		}
		return new ApiResponse("Order not deleted!!");
	}

//	@Override
//	public Order addNewOrder(Order r) {
//		
//		return repo.save(r);
//	}
	
	@Override
	public ApiResponse addNewOrder(OrderDto newOrder) {
		User user=userRepo.findById(newOrder.getUser_id())
				.orElseThrow(()-> new ResourceNotFoundException("Invalid User id!!!"));
		Payment payment=paymentRepo.findById(newOrder.getPayment_id()).
				orElseThrow(()->new ResourceNotFoundException("Invalid Payment id!!"));
		Product product=productRepo.findById(newOrder.getProduct_id())
				.orElseThrow(()-> new ResourceNotFoundException("Invalid Product id!!"));
		Order order=mapper.map(newOrder, Order.class);
		order.setPayment(payment);
		order.setUser(user);
		order.setProduct(product);
		repo.save(order);
		return new ApiResponse("Added new Order with Id- "+order.getId());
	}

	@Override
	public Order getOrderDetails(Long id) {
		Order order=repo.findById(id)
				.orElseThrow(()->new ResourceNotFoundException("Order is not present!!"));
		
		return order;
	}

	@Override
	public ApiResponse updateOrder(Order uporder) {
		if(repo.existsById(uporder.getId()))
		{
			repo.save(uporder);
			return new ApiResponse("Order updated successfully!!");
		}
		return new ApiResponse("Order not updated!!");
	}
	
	

}
