package com.app.services;

import java.util.List;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.dto.ApiResponse;
import com.app.dto.ProductDto;
import com.app.entities.Product;
import com.app.entities.ProductCategory;
import com.app.exceptions.ResourceNotFoundException;
import com.app.repositories.ProductCategoryRepository;
import com.app.repositories.ProductRepository;

@Service
@Transactional
public class ProductServiceImpl implements ProductService {
	
	@Autowired
	private ProductRepository repo;
	
	@Autowired
	private ProductCategoryRepository categoryRepo;
	
	@Autowired
	private ModelMapper mapper;

	@Override
	public List<ProductDto> getAllProducts() {
		
		return repo.findAll()
				.stream()
				.map(product->mapper.map(product, ProductDto.class))
				.collect(Collectors.toList());
	}

	@Override
	public ApiResponse deleteProduct(Long productId) {
		Product delproduct=repo.findById(productId)
				.orElseThrow(()->new ResourceNotFoundException("Invalid Product id"));
		repo.delete(delproduct);
		return new ApiResponse("Product with id "+delproduct.getId()+" deleted");
	}

//	@Override
//	public Product addNewProduct(Product newproduct) {
//		return repo.save(newproduct);
//	}

	@Override
	public ApiResponse addNewProduct(ProductDto newProduct) {
		
		//firstly deal with parent table and parent table is ProductCategory
		//after that add product if and only if category is exists!! i.e mapping is done here
		
		ProductCategory category=
				categoryRepo.findById(newProduct.get)//need category repo dependency here
				.orElseThrow(()->new ResourceNotFoundException("Category not found!!!"));
		System.out.println("in service of productserviceImpl");
		Product prod=mapper.map(newProduct,Product.class);
		prod.setCategory(category);//here set category on our product
		repo.save(prod);
		return new ApiResponse("Added new Product with Id- "+prod.getId());
	}
	@Override
	public Product getProductDetails(Long id) {
		Product product=repo.findById(id)
				.orElseThrow(()->new ResourceNotFoundException("Invalid Id"));
		return product;
	}

	@Override
	public ApiResponse updateProduct(Product p) {

        if(repo.existsById(p.getId()))
        {
		repo.save(p);
		return new ApiResponse("Product with id "+p.getId()+" updated successfully!!");
        }
		return new ApiResponse("Updation failed!!");
	}

}
